; ModuleID = 'moudle'
source_filename = "moudle"

@sort_arr = global [5 x i32] zeroinitializer

define i32 @combine(i32* %0, i32 %1, i32* %2, i32 %3) {
combineEntry:
  %arr1 = alloca i32*, align 8
  store i32* %0, i32** %arr1, align 8
  %arr1_length = alloca i32, align 4
  store i32 %1, i32* %arr1_length, align 4
  %arr2 = alloca i32*, align 8
  store i32* %2, i32** %arr2, align 8
  %arr2_length = alloca i32, align 4
  store i32 %3, i32* %arr2_length, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %i, align 4
  %j = alloca i32, align 4
  store i32 0, i32* %j, align 4
  %k = alloca i32, align 4
  store i32 0, i32* %k, align 4
  br label %condition

condition:                                        ; preds = %the_next, %combineEntry
  %i1 = load i32, i32* %i, align 4
  %arr1_length2 = load i32, i32* %arr1_length, align 4
  %lt = icmp slt i32 %i1, %arr1_length2
  %cond = zext i1 %lt to i32
  %cmp = icmp eq i32 %cond, 0
  br i1 %cmp, label %conl_false, label %conl_true
  %cond7 = icmp ne i32 0, %chek_32
  br i1 %cond7, label %while_body, label %next_block

while_body:                                       ; preds = %condition, %conl_true
  br label %condition8

next_block:                                       ; preds = %condition, %conl_true, %conl_false
  br label %condition32

conl_true:                                        ; preds = %condition
  %j3 = load i32, i32* %j, align 4
  %arr2_length4 = load i32, i32* %arr2_length, align 4
  %lt5 = icmp slt i32 %j3, %arr2_length4
  %cond6 = zext i1 %lt5 to i32
  %cmp_2 = icmp eq i32 %cond6, 0
  %chek_32 = zext i1 %cmp_2 to i32
  br i1 %cmp_2, label %while_body, label %next_block

conl_false:                                       ; preds = %condition
  br label %next_block

condition8:                                       ; preds = %while_body
  %i9 = load i32, i32* %i, align 4
  %elementPoint = getelementptr i32*, i32** %arr1, i32 %i9
  %arr110 = load i32*, i32** %elementPoint, align 8
  %j11 = load i32, i32* %j, align 4
  %elementPoint12 = getelementptr i32*, i32** %arr2, i32 %j11
  %arr213 = load i32*, i32** %elementPoint12, align 8
  %lt14 = icmp slt i32* %arr110, %arr213
  %cond15 = zext i1 %lt14 to i32
  %cond29 = icmp ne i32 0, %cond15
  br i1 %cond29, label %the_true, label %the_false

the_true:                                         ; preds = %condition8
  %k16 = load i32, i32* %k, align 4
  %elementPoint17 = getelementptr [5 x i32], [5 x i32]* @sort_arr, i32 %k16
  %i18 = load i32, i32* %i, align 4
  %elementPoint19 = getelementptr i32*, i32** %arr1, i32 %i18
  %arr120 = load i32*, i32** %elementPoint19, align 8
  store i32* %arr120, [5 x i32]* %elementPoint17, align 8
  %i21 = load i32, i32* %i, align 4
  %addtmp = add i32 %i21, 1
  store i32 %addtmp, i32* %i, align 4
  br label %the_next

the_false:                                        ; preds = %condition8
  %k22 = load i32, i32* %k, align 4
  %elementPoint23 = getelementptr [5 x i32], [5 x i32]* @sort_arr, i32 %k22
  %j24 = load i32, i32* %j, align 4
  %elementPoint25 = getelementptr i32*, i32** %arr2, i32 %j24
  %arr226 = load i32*, i32** %elementPoint25, align 8
  store i32* %arr226, [5 x i32]* %elementPoint23, align 8
  %j27 = load i32, i32* %j, align 4
  %addtmp28 = add i32 %j27, 1
  store i32 %addtmp28, i32* %j, align 4
  br label %the_next

the_next:                                         ; preds = %the_false, %the_true
  %k30 = load i32, i32* %k, align 4
  %addtmp31 = add i32 %k30, 1
  store i32 %addtmp31, i32* %k, align 4
  br label %condition

condition32:                                      ; preds = %next_block
  %i35 = load i32, i32* %i, align 4
  %arr1_length36 = load i32, i32* %arr1_length, align 4
  %eq = icmp eq i32 %i35, %arr1_length36
  %cond37 = zext i1 %eq to i32
  %cond73 = icmp ne i32 0, %cond37
  br i1 %cond73, label %the_true33, label %the_false34

the_true33:                                       ; preds = %condition32
  br label %condition39

the_false34:                                      ; preds = %condition32
  br label %condition56

the_next38:                                       ; preds = %next_block58, %next_block41
  %arr1_length74 = load i32, i32* %arr1_length, align 4
  %arr2_length75 = load i32, i32* %arr2_length, align 4
  %addtmp76 = add i32 %arr1_length74, %arr2_length75
  %subtmp = sub i32 %addtmp76, 1
  %elementPoint77 = getelementptr [5 x i32], [5 x i32]* @sort_arr, i32 %subtmp
  %sort_arr = load [5 x i32], [5 x i32]* %elementPoint77, align 4
  ret [5 x i32] %sort_arr

condition39:                                      ; preds = %while_body40, %the_true33
  %j42 = load i32, i32* %j, align 4
  %arr2_length43 = load i32, i32* %arr2_length, align 4
  %lt44 = icmp slt i32 %j42, %arr2_length43
  %cond45 = zext i1 %lt44 to i32
  %cond46 = icmp ne i32 0, %cond45
  br i1 %cond46, label %while_body40, label %next_block41

while_body40:                                     ; preds = %condition39
  %k47 = load i32, i32* %k, align 4
  %elementPoint48 = getelementptr [5 x i32], [5 x i32]* @sort_arr, i32 %k47
  %j49 = load i32, i32* %j, align 4
  %elementPoint50 = getelementptr i32*, i32** %arr2, i32 %j49
  %arr251 = load i32*, i32** %elementPoint50, align 8
  store i32* %arr251, [5 x i32]* %elementPoint48, align 8
  %k52 = load i32, i32* %k, align 4
  %addtmp53 = add i32 %k52, 1
  store i32 %addtmp53, i32* %k, align 4
  %j54 = load i32, i32* %j, align 4
  %addtmp55 = add i32 %j54, 1
  store i32 %addtmp55, i32* %j, align 4
  br label %condition39

next_block41:                                     ; preds = %condition39
  br label %the_next38

condition56:                                      ; preds = %while_body57, %the_false34
  %i59 = load i32, i32* %i, align 4
  %arr1_length60 = load i32, i32* %arr1_length, align 4
  %lt61 = icmp slt i32 %i59, %arr1_length60
  %cond62 = zext i1 %lt61 to i32
  %cond63 = icmp ne i32 0, %cond62
  br i1 %cond63, label %while_body57, label %next_block58

while_body57:                                     ; preds = %condition56
  %k64 = load i32, i32* %k, align 4
  %elementPoint65 = getelementptr [5 x i32], [5 x i32]* @sort_arr, i32 %k64
  %i66 = load i32, i32* %i, align 4
  %elementPoint67 = getelementptr i32*, i32** %arr2, i32 %i66
  %arr268 = load i32*, i32** %elementPoint67, align 8
  store i32* %arr268, [5 x i32]* %elementPoint65, align 8
  %k69 = load i32, i32* %k, align 4
  %addtmp70 = add i32 %k69, 1
  store i32 %addtmp70, i32* %k, align 4
  %i71 = load i32, i32* %i, align 4
  %addtmp72 = add i32 %i71, 1
  store i32 %addtmp72, i32* %i, align 4
  br label %condition56

next_block58:                                     ; preds = %condition56
  br label %the_next38
}

define i32 @main() {
mainEntry:
  %a = alloca i32*, align 8
  %elementPoint = getelementptr i32*, i32** %a, i32 0
  store i32 1, i32** %elementPoint, align 4
  %elementPoint1 = getelementptr i32*, i32** %a, i32 1
  store i32 5, i32** %elementPoint1, align 4
  %b = alloca i32*, align 8
  %elementPoint2 = getelementptr i32*, i32** %b, i32 0
  store i32 1, i32** %elementPoint2, align 4
  %elementPoint3 = getelementptr i32*, i32** %b, i32 1
  store i32 4, i32** %elementPoint3, align 4
  %elementPoint4 = getelementptr i32*, i32** %b, i32 2
  store i32 14, i32** %elementPoint4, align 4
  %a5 = load i32*, i32** %a, align 8
  %b6 = load i32*, i32** %b, align 8
  %callcombine = call i32 @combine(i32* %a5, i32 2, i32* %b6, i32 3)
  ret i32 %callcombine
}
